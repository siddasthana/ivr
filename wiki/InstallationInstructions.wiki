<h1>Installation</h1>
<h3>Instructions to setup IVR System</h3>



<h2>Detailed Instructions for Ubuntu 11.04</h2>


<p><h3>Web Components</h3></p>
<li>Install Python, Java SDK, MySQL(and mysql header files libmysqlclient-dev, libmysqld-dev, libmysqlcppconn-dev)</li>
<li>Install Django (Package python-django in Synaptic Package Manager)</li>
<li>Install wadofstuff Django serializers (install python-setuptools then run cmd easy_install wadofstuff-django-serializers)</li>
<li>Install mysqldb python module (synaptics Package Manager : python mysqldb)</li>
<li>Create a mysql database called 'otalo', and a user 'otalo' and password 'otalo' with all privileges to it.</li>

<p><h3>Dev Environment</h3></p>
<li>Setup web components above</li>
<li>Install Eclipse</li>
<li>Install Subclipse eclipse plugin</li>
<li>Install GWT eclipse plugin</li>
<li>Checkout gwt folder from the repository (trunk/web/). You can follow the instructions here. Be sure to check out the code as a GWT project and name it 'ao' with package name 'org.otalo.ao'.</li>
<li>Checkout trunk/web/django into a new project ao_server. Optionally use python project plugin</li>
<li>Checkout trunk/IVR into a new project ao_IVR. Optionally use lua plugin</li>

<p><h3>Web Server</h3></p>
<li>Setup web components above</li>
<ul><li>Install Apache sudo apt-get install apache2</li></ul>
<li>Checkout trunk/web and place the code in a place you are comfortable with web server accessing it (a good place is /var/www). You can place the gwt and django_templates folders in /html subdirectory; the django folder can stay at the same level and renamed to 'otalo' for specificity.</li>
<li>In the django (or 'otalo') directory, run 'python manage.py syncdb' to setup the mysql tables. Run 'python manage.py loaddata production.json' and 'python manage.py loaddata tags.json' to seed the tables.</li>
<li>Install and configure mod_wsgi for your apache server</li>
<li>setup django project to interface with wsgi using these instructions</li>
<li>Be sure that the paths in django.wsgi, settings.py, and the paths in your apache config file are all matched up</li>


<h3>IVR</h3>
<li>Download and install FreeSWITCH, with mod_shout enabled</li><ul>
	<li>Use Terminal cd /usr/local/src</li>
	<li>sudo apt-get install git-core subversion build-essential autoconf automake libtool libncurses5 libncurses5-dev make libjpeg-dev</li>
	<li>sudo apt-get install libcurl4-openssl-dev libexpat1-dev libgnutls-dev libtiff4-dev libx11-dev unixodbc-dev libssl-dev zlib1g-dev libzrtpcpp-dev libasound2-dev libogg-dev libvorbis-dev libperl-dev libgdbm-dev libdb-dev python-dev uuid-dev</li>
	<li>sudo wget http://files.freeswitch.org/freeswitch-1.0.6.tar.gz</li>
	<li>sudo tar xvfz freeswitch-1.0.6.tar.gz</li>
      	<li>cd /usr/local/src/freeswitch</li>
	<li>sudo gedit modules.conf</li>
	<li>Change following lines (Remove hashes)</li><ul>
 		<li>applications/mod_curl</li>
		<li>asr_tts/mod_flite</li>
		<li>formats/mod_shout</li></ul>
	<li>sudo./configure</li>
	<li>sudo make all cd-sounds-install cd-moh-install</li>
	<li>sudo ./make && make install</li>

	<h4>If process(wget to last step) fails then remove both freeswitch-1.0.6.tar.gz and freeswitch-1.0.6 directory and then proceed to otherwise jump to installing Lua</h4>

	<li>sudo git clone git://git.freeswitch.org/freeswitch.git</li>
	<li>cd freeswitch</li>
	<li>sudo./bootstrap.sh</li>
	<li>sudo ./configure</li>
	<li>sudo make</li>
	<li>sudo make install</li>
	<li>sudo make uhd-sounds-install</li>
	<li>sudo make uhd-moh-install</li>
	<li>sudo make samples</li></ul>

	
<li>Download and install lua and luasql</li>
		<ul><li>luasql install from http://wiki.freeswitch.org/wiki/Installing_LuaSQL</li></ul>
<li>Open ports 5060, 5080 tcp and udp in server firewall</li><ul>
	<li>sudo iptables -A INPUT -p tcp -d 0/0 -s 0/0 --dport 5060 -j ACCEPT</li>
	<li>sudo iptables -A INPUT -p tcp -d 0/0 -s 0/0 --dport 5080 -j ACCEPT</li>
	<li>sudo iptables -A INPUT -p udp -d 0/0 -s 0/0 --dport 5060 -j ACCEPT</li>
	<li>sudo iptables -A INPUT -p udp -d 0/0 -s 0/0 --dport 5080 -j ACCEPT</li></ul>
<li>Checkout trunk/IVR and drop the directory into /usr/local/freeswitch/scripts/AO (i.e. call the downloaded directory 'AO')</li>
<li>In FreeSWITCH's conf/dialplan/default directory, create a new dialplan for AO. Call it something like 001_otalo.xml, and make it look like this:
{{{
<extension name="incoming">
        <condition field="destination_number" expression="^30142000$">
            <action application="lua" data="AO/otalo.lua" />
        </condition>
 </extension>
}}}
The 'expression' attribute should correspond to your inbound PRI number or SIP extension (i.e. '5000', but make sure no other app is taking that extension (including in /dialplan/default.xml)). Default user ids are 1000, 1001, 1002, all with password 1234
<li>Create a DSN with name otalo for database otalo</li><ul>
	<li>Install libmyodbc from Synaptic</li>
	<li>In terminal type 'sudo ODBCConfig' without quote</li>
	<li>Create driver for MySql</li><ul>
		<li>In Driver select /usr/lib/odbc/libmyodbc.so</li>
		<li>In Setup select /usr/lib/odbc/libmyodbcS.so</li></ul>
	<li>Create System DSN name = otalo database name = otalo and driver MySql</li></ul>
<li>Open /usr/local/freeswitch/scripts/AO/paths.lua search for term logfile and set the path where you have made a new file for logging.</li>